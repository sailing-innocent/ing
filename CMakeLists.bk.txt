cmake_minimum_required(VERSION 3.18)
project(testbed)
add_definitions("-DUNICODE" "-D_UNICODE")

set(CMAKE_BUILD_TYPE DEBUG CACHE STRING "Build Type" FORCE)


OPTION(TESTING "is testing building" ON)
OPTION(EXAMPLE "is setting example code" ON)
set(TESTING TRUE)
set(EXAMPLE FALSE)

LIST(APPEND LIB_LINK_DIRS
    "${PROJECT_BINARY_DIR}"
    "E:/source/opencv/build/lib/Debug"
)

# add_subdirectory("${PROJECT_SOURCE_DIR}/src/math")
if(${TESTING})
    list(APPEND OpenCV_LIB_DIR
        "E:/libs/opencv/opencv/build/x64/vc15/lib"
    )
    if (${CMAKE_BUILD_TYPE} STREQUAL DEBUG)
        message("USE DEBUG")
        list(APPEND OpenCV_LIBS
            opencv_world460d
        )
    else()
        message("USE_RELEASE")
        list(APPEND OpenCV_LIBS
            opencv_world460
        )
    endif()


    list(APPEND OpenCV_INCLUDE_DIRS
        "E:/libs/opencv/opencv/build/include"
    )

    list(APPEND TESTBED_SOURCE
        "src/hello/hello.cc"
    )
    add_executable(testbed ${TESTBED_SOURCE})
    target_include_directories(testbed PUBLIC ${OpenCV_INCLUDE_DIRS})
    target_link_libraries(testbed PUBLIC ${OpenCV_LIBS})
    target_link_directories(testbed PUBLIC ${OpenCV_LIB_DIR})

elseif(${EXAMPLE})
    # APPEND PUBLIC LIBS
        
    LIST(APPEND INCLUDE_DIRS
        "${PROJECT_SOURCE_DIR}/include"
    )

    LIST(APPEND TESTBED_LIBS
        d3dcompiler
        D3D12
        dxgi
    )
    LIST(APPEND D3DAPP_SOURCES
        "app/drx/d3dapp.cc"
        "app/drx/d3dUtil.cc"
        "core/timer/tbtimer.cc"
        "math/tbMath.cc"          
    )
    message("EXAMPLING")
    list(APPEND TESTBED_SOURCE
        "src/source/frameResource.cc"
        "core/geometry/geometryGenerator.cc"
        "src/wireframe/static_app.cc"
    )
    add_library(d3dapp ${D3DAPP_SOURCES})
    target_compile_definitions(d3dapp PUBLIC -DUNICODE -D_UNICODE)
    target_link_directories(d3dapp PUBLIC ${LIB_LINK_DIRS})
    target_include_directories(d3dapp PUBLIC ${INCLUDE_DIRS})
    target_link_libraries(d3dapp PUBLIC ${TESTBED_LIBS})
    add_executable(testbed WIN32 ${TESTBED_SOURCE})
else()
    LIST(APPEND D3DAPP_SOURCES
        "app/drx/d3dapp.cc"
        "app/drx/d3dUtil.cc"
        "core/timer/tbtimer.cc"
        "math/tbMath.cc"          
    )
    message("NOT TESTING")
    list(APPEND TESTBED_SOURCE
        # "src/static/BoxApp.cpp"
        "src/static/canvas_app.cc"
    )
    add_library(d3dapp ${D3DAPP_SOURCES})
    target_compile_definitions(d3dapp PUBLIC -DUNICODE -D_UNICODE)
    target_link_directories(d3dapp PUBLIC ${LIB_LINK_DIRS})
    target_include_directories(d3dapp PUBLIC ${INCLUDE_DIRS})
    target_link_libraries(d3dapp PUBLIC ${TESTBED_LIBS})
    add_executable(testbed WIN32 ${TESTBED_SOURCE})
endif()

if(${TESTING})
else()
    target_link_libraries(testbed PRIVATE d3dapp)
endif()
